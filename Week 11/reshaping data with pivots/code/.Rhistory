install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
library(devtools)
devtools::install_github("matthewbjane/ThemePark")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
# M and SD
datasaurus_dozen |>
group_by(dataset) |>
summarize(mean_x = mean(x),
sd_x = sd(x),
mean_y = mean(y),
sd_y = sd(y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r')|>
kable_classic(full_width = FALSE)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyr)
library(patchwork)
library(readr)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyr)
library(janitor)
library(knitr)
library(kableExtra)
install.packages("datasauRus")
library(datasauRus)
install.packages("plotrix")
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyr)
library(janitor)
library(knitr)
library(kableExtra)
install.packages("datasauRus")
library(datasauRus)
install.packages("plotrix")
library(plotrix)
install.packages("patchwork")
library(patchwork)
View(datasaurus_dozen)
View(datasaurus_dozen)
# M and SD
datasaurus_dozen |>
group_by(dataset) |>
summarize(mean_x = mean(x),
sd_x = sd(x),
mean_y = mean(y),
sd_y = sd(y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r')|>
kable_classic(full_width = FALSE)
# correlation
datasaurus_dozen |>
group_by(dataset) |>
summarize(correlation = cor(x, y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r') |>
kable_classic(full_width = FALSE)
ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~dataset) +
theme_minimal()
# get data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_after_exclusions <- data_processed |>
filter(exclude_amp == "include" &
n_items == 3 &
gender %in% c("male", "female"))
# data and aesthetics calls
plot_1 <-
ggplot(data = data_after_exclusions,
aes(x = mean_self_report,
y = amp_score,
color = gender,
shape = gender)) +
# draw lines manually
geom_vline(xintercept = 4, linetype = "dotted") +
geom_hline(yintercept = 0.5, linetype = "dotted") +
# draw geoms using the aesthetics (x, y, color and shape)
## points
geom_point() +
## fit curves, in this case a linear model
geom_smooth(method = "lm") +
# adjust axis labels and ranges  \n = new line
scale_x_continuous(name = "Explicit evaluation\n(Self-report)",
breaks = scales::breaks_pretty(n = 7)) +
scale_y_continuous(name = "Implicit evaluation\n(AMP)") +
# apply a theme
theme_linedraw() +
# adjust elements of the theme
labs(title = "Scatter plot with linear regression lines",
color = "Gender",
shape = "Gender") +
# adjust the colors
scale_color_manual(values = c("female" = "#FF69B4",
"male" = "#6495ED"),
labels = c("female" = "Female",
"male" = "Male")) +
# adjust the shapes
scale_shape_manual(values = c("female" = 16,
"male" = 17),
labels = c("female" = "Female",
"male" = "Male")) +
# display specific x and y coordinates without dropping data points (nb using `limits` drops data points, coord_cartesian does not)
coord_cartesian(xlim = c(1, 7),
ylim = c(0, 1))
# display plot below chunk
plot_1
# save plot to disk as png
ggsave(plot = plot_1,
filename = "plots/plot_1.pdf",
width = 6,
height = 5)
plot_1 + theme_barbie()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points (7 groups in reasonabale gaps)
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram() +
geom_histogram(binwidth = 0.1, boundary = 0.5) +
scale_x_continuous(breaks= seq(0,1,0.1), name = "AMP score")+
scale_y_continuous(breaks = seq(0,40,5), name= "Count")+
theme_classic()
# if the variables are defind by astetics they are in the aes() call
# if they are just for astetics they are outside aes()
ggplot(data = data_after_exclusions)+
aes(x = mean_self_report) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here,
# Important: they are influenced by the data but not really the data
color = "#FF69B4",
fill = "darkblue",
#seetrough
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_processed,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here,
# Important: they are influenced by the data but not really the data
color = "#392774",
fill = "darkblue",
#seetrough
alpha = 0.2) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 10),
name = "AMP Score")+
scale_y_continuous(breaks = scales::breaks_pretty(n = 5),
name = "Density")
theme_classic()
# create the summary values to be plotted
summary_amp <- data_after_exclusions %>%
group_by(gender) %>%
summarize(amp_mean = mean(amp_score),
amp_se = plotrix::std.error(amp_score))
# plot these values
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col() +
# geom_bar(stat = "identity") + # NB geom_col is equivalent to geom_bar when stat == "identity
geom_linerange(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se))
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of with Standard Errors",
x = "Gender",
y = "Mean AMP score") +
theme_linedraw()
View(plot_1)
View(data_after_exclusions)
# Plot the summarized data
ggplot(data = summary_self_reports,
aes(x = gender,
y = self_report_mean)) +
geom_col(fill = "#4682B4", # A different color for variety
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = self_report_mean - self_report_se,
ymax = self_report_mean + self_report_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of Self-Report Scores with Standard Errors",
x = "Gender",
y = "Mean Self-Report Score") +
coord_flip() + # Swapping X and Y axes
theme_linedraw()
#not done
# Summarize data for self-reports
summary_self_reports <- data_after_exclusions %>%
group_by(gender) %>%
summarize(self_report_mean = mean(self_report_score),
self_report_se = plotrix::std.error(self_report_score))
summary_self_reports <- data_after_exclusions %>%
group_by(gender) %>%
summarize(self_report_mean = mean(self_report_score),
self_report_se = plotrix::std.error(self_report_score))
summary_self_reports <- data_after_exclusions %>%
group_by(gender) %>%
summarize(self_report_mean = mean(mean_self_report),
self_report_se = plotrix::std.error(mean_self_report))
ggplot(data = summary_self_reports,
aes(x = gender,
y = self_report_mean)) +
geom_col(fill = "#4682B4", # A different color for variety
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = self_report_mean - self_report_se,
ymax = self_report_mean + self_report_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of Self-Report Scores with Standard Errors",
x = "Gender",
y = "Mean Self-Report Score") +
coord_flip() + # Swapping X and Y axes
theme_linedraw()
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
library(faux)
library(dplyr)
library(tidyr)
library(tibble)
install.packages("faux")
library(faux)
install.packages("faux")
library(faux)
install.packages("faux")
library(faux)
devtools::install_github("debruine/faux")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
devtools::install_github("debruine/faux")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
install.packages("psych")
library(psych)
library(readr)
library(knitr)
library(kableExtra)
install.packages("faux")
library(faux)
# set seed for reproducibility
set.seed(123)
# generate data
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
install.packages("remotes")
remotes::install_github("debruine/faux")
install.packages("faux", dependencies = TRUE)
library(faux)
devtool::install_github("faux")
install.packages("devtool")
devtool::install_github("faux")
devtool::install_github("faux")
devtool::install_github("faux")
install.packages("devtool")
devtool::install_github("faux")
library(faux)
install.packages("devtool")
devtool::install_github("faux")
devtool::install_github("debruine/faux")
devtools::install_github("debruine/faux")
# set seed for reproducibility
set.seed(123)
# generate data
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
library(dplyr)
library(tidyr)
library(tibble)
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
install.packages("psych")
library(psych)
library(readr)
library(knitr)
library(kableExtra)
# set seed for reproducibility
set.seed(123)
# generate data
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
# recode responses less than 1 or more than 5 to those values, then round scores to whole numbers
# note that {faux} has functions for doing this better
data_wide_likert <- data_wide %>%
mutate(across(starts_with("item_"), ~ round_half_up(.x, digits = 0))) %>%
mutate(across(starts_with("item_"), ~ ifelse(.x < 1, 1, ifelse(.x > 5, 5, .x))))
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
ggplot(data_wide_likert, aes(x = item_1)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_2)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_3)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_4)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_5)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
View(data_wide_likert)
cronbachs_alpha_estimate
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 3)
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
data_long <- data_wide_likert %>%
pivot_longer(cols = starts_with("item_"),
names_to = "item",
values_to = "response")
ggplot(data_long, aes(x = response)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw() +
facet_wrap(~ item)
View(data_long)
sum_scores <- data_long %>%
group_by(id) %>%
summarise(sum_score = sum(response))
ggplot(sum_scores, aes(x = sum_score)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
scale_x_continuous(breaks = breaks_pretty(n = 10)) +
theme_linedraw()
View(sum_scores)
data_wide_again <- data_long %>%
pivot_wider(names_from = item,
values_from = response)
data_item_and_sum_scores <- data_wide_again %>%
left_join(sum_scores, by = "id")
